{"version":3,"sources":["Components/App/useQuery/fetchCharacters.js","Components/App/Cards/CharacterCard.js","Components/App/RickAndMorty.js","Components/App/NavBar.js","Components/App/useQuery/fetchEpisodes.js","Components/App/Episodes.js","Components/App/useQuery/fetchLocations.js","Components/App/Locations.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["fetchCharacters","a","fetch","res","json","CharacterCard","dataPoint","dataIndex","className","name","src","image","origin","status","RickAndMorty","useQuery","data","console","log","results","map","NavBar","setNavBar","navBar","onClick","fetchEpisodes","EpisodesRicky","episode","fetchLocations","LocationsRicky","dataCharacter","statusCharacter","type","residents","resident","indexR","queryClient","QueryClient","App","useState","QueryClientProvider","client","Episodes","Locations","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c31c8aa9.chunk.js","sourcesContent":["const fetchCharacters = async () => {\n    const res = await fetch(\"https://rickandmortyapi.com/api/character\");\n    return res.json();\n  };\n\n  export default fetchCharacters;\n\n\n","import React from 'react';\n\n\n\nconst CharacterCard = ({dataPoint, dataIndex}) => {\n    return ( \n        \n            <div key={dataIndex} className=\"card\">\n              <h3>Name: {dataPoint.name}</h3>\n              <img src={dataPoint.image} />\n              <p>Origin: {dataPoint.origin.name}</p>{\" \"}\n              <p>Status: {dataPoint.status}</p>\n            </div>\n         \n     );\n}\n \nexport default CharacterCard;","import React, { useState } from \"react\";\nimport { useQuery, QueryClient } from \"react-query\";\nimport fetchCharacters from './useQuery/fetchCharacters';\nimport CharacterCard from './Cards/CharacterCard';\n\n//https://rickandmortyapi.com/api\n\nconst RickAndMorty = () => {\n  const { data, status } = useQuery(\"characterList\", fetchCharacters);\n\n  console.log(data);\n  return (\n    <div>\n      <h2>Rick And Morty</h2>\n\n      {status === \"error\" && <div>Error Fetching Data</div>}\n      {status === \"Loading\" && <div>Loading Data....</div>}\n      {status === \"success\" && (\n        <>\n          {data.results.map((dataPoint, dataIndex) => (\n            <CharacterCard dataPoint={dataPoint} dataIndex={dataIndex} />\n\n          ))}\n          {data.results.map((dataPoint, dataIndex) => (\n            <div key={dataIndex} className=\"card\">\n              <h3>Name: {dataPoint.name}</h3>\n              <img src={dataPoint.image} />\n              <p>Origin: {dataPoint.origin.name}</p>{\" \"}\n              <p>Status: {dataPoint.status}</p>\n            </div>\n          ))}\n\n        </>\n      )}\n      {/* {status === 'success' && dataSet === \"https://rickandmortyapi.com/api/episode\" && (\n                  <>\n               {data.results.map((dataPoint, dataIndex)=>\n                <div key={dataIndex} className=\"card\">\n                    <h3>Name: {dataPoint.name}</h3>\n                   \n                     <p>Episode: {dataPoint.episode}</p> <p>Status: {dataPoint.status}</p> \n                     </div>\n              \n               )}\n        \n               </>\n              \n           )}  */}\n    </div>\n  );\n};\n\nexport default RickAndMorty;\n","import React, { useState } from \"react\";\n\nconst NavBar = ({ setNavBar, navBar }) => {\n  return (\n    <div>\n      {navBar !== \"C\" && (\n        <button onClick={() => setNavBar(\"C\")}>Characters</button>\n      )}\n      {navBar !== \"E\" && (\n        <button onClick={() => setNavBar(\"E\")}>Episodes</button>\n      )}\n      {navBar !== \"L\" && (\n        <button onClick={() => setNavBar(\"L\")}>Locations</button>\n      )}\n    </div>\n  );\n};\n\nexport default NavBar;\n","const fetchEpisodes = async () => {\n  const res = await fetch(\"https://rickandmortyapi.com/api/episode\");\n  return res.json();\n};\n\nexport default fetchEpisodes;","import React, { useState } from \"react\";\nimport { useQuery, QueryClient } from \"react-query\";\nimport fetchEpisodes from './useQuery/fetchEpisodes';\n\n// const fetchEpisodes = async () => {\n//   const res = await fetch(\"https://rickandmortyapi.com/api/episode\");\n//   return res.json();\n// };\n\nconst EpisodesRicky = () => {\n  const { data, status } = useQuery(\"episodes\", fetchEpisodes);\n\n  console.log(data);\n  return (\n    <div>\n      <h2>Episodes</h2>\n\n      {status === \"error\" && <div>Error Fetching Data</div>}\n      {status === \"Loading\" && <div>Loading Data....</div>}\n      {status === \"success\" && (\n        <>\n          {data.results.map((dataPoint, dataIndex) => (\n            <div key={dataIndex} className=\"card\">\n              <h3>Episode Name: {dataPoint.name}</h3>\n              <p>Episode Number: {dataPoint.episode}</p>{\" \"}\n              <p>Characters: eventually pull here</p>\n            </div>\n          ))}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default EpisodesRicky;\n","const fetchLocations = async () => {\n    const res = await fetch(\"https://rickandmortyapi.com/api/location\");\n    return res.json();\n  };\n\n  export default fetchLocations;","import React, { useState } from \"react\";\nimport { useQuery, QueryClient } from \"react-query\";\nimport fetchLocations from './useQuery/fetchLocations';\nimport fetchCharacters from './useQuery/fetchCharacters';\nimport CharacterCard from './Cards/CharacterCard';\n\nconst LocationsRicky = () => {\n  const { data, status } = useQuery(\"locations\", fetchLocations);\n  const { dataCharacter, statusCharacter } = useQuery(\"characterList\", fetchCharacters);\n\n  console.log({data});\n  return (\n    <div>\n      <h2>Locations</h2>\n\n      {status === \"error\" && <div>Error Fetching Data</div>}\n      {status === \"Loading\" && <div>Loading Data....</div>}\n      {status === \"success\" && (\n        <>\n          {data.results.map((dataPoint, dataIndex) => (\n            <div key={dataIndex} className=\"card\">\n              <h3>Location Name: {dataPoint.name}</h3>\n              <p> Type: {dataPoint.type}</p>\n              <p>Residents: {dataPoint.residents.map((resident, indexR)=>(\n                //   <CharacterCard dataPoint={resident} dataIndex={indexR} />\n                <div>{resident}</div>\n              ))\n              }</p>\n            </div>\n          ))}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default LocationsRicky;\n","import React, { useState } from \"react\";\nimport \"../Styling/App.css\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query-devtools\";\nimport RickAndMorty from \"./RickAndMorty\";\nimport NavBar from './NavBar';\nimport EpisodesRicky from './Episodes';\nimport LocationsRicky from './Locations';\n\nconst queryClient = new QueryClient();\n\nconst App = () => {\n  const [navBar, setNavBar] = useState('C');\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <div className=\"App\">\n        <NavBar setNavBar={setNavBar} navBar={navBar}/>\n        {navBar === 'C' && <RickAndMorty />}\n        {navBar === 'E' && <EpisodesRicky />}\n        {navBar === 'L' && <LocationsRicky />}\n      </div>\n      {/* <ReactQueryDevtools initialIsOpen={false} /> */}\n    </QueryClientProvider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}