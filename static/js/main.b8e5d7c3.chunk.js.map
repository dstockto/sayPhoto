{"version":3,"sources":["Components/App/NavBar.js","Components/App/Planets.js","Components/App/People.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["Navbar","setPage","onClick","fetchPlanets","a","fetch","res","json","Planets","useQuery","data","status","console","log","People","queryClient","QueryClient","App","useState","page","QueryClientProvider","client","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAYeA,EATA,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACb,OACI,gCACI,wBAAQC,QAAS,kBAAKD,EAAQ,YAA9B,qBACA,wBAAQC,QAAS,kBAAKD,EAAQ,WAA9B,wB,iCCHNE,EAAY,uCAAG,4BAAAC,EAAA,sEACCC,MAAM,kCADP,cACXC,EADW,yBAEVA,EAAIC,QAFM,2CAAH,qDAoBHC,EAfC,WACZ,MAAuBC,YAAS,UAAWN,GAApCO,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAGb,OADAC,QAAQC,IAAIH,GACH,gCACL,yCACA,4BAAKC,QCPEG,EANA,WACX,OAAS,8BACL,2C,gBCGFC,EAAc,IAAIC,IAmBTC,MAjBf,WACE,MAAwBC,mBAAS,WAAjC,mBAAOC,EAAP,KAAalB,EAAb,KAEA,OACE,cAACmB,EAAA,EAAD,CAAqBC,OAAQN,EAA7B,SACA,sBAAKO,UAAU,MAAf,UACE,gDACA,cAAC,EAAD,CAAQrB,QAASA,IACjB,qBAAKqB,UAAU,UAAf,SACY,YAATH,EAAqB,cAAC,EAAD,IAAc,cAAC,EAAD,YCN7BI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b8e5d7c3.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Navbar = ({setPage}) => {\n    return (\n        <nav>\n            <button onClick={()=> setPage('planets')}>Planets</button>\n            <button onClick={()=> setPage('people')}>People</button>\n        </nav>\n      );\n}\n \nexport default Navbar;","import React from 'react';\nimport {useQuery, QueryClient} from 'react-query';\n\n\nconst fetchPlanets = async () => {\n    const res = await fetch('https://swapi.dev/api/planets/');\n    return res.json();\n}\n\nconst Planets = () => {\n    const {data, status} = useQuery('planets', fetchPlanets);\n\n    console.log(data);\n    return ( <div>\n        <h2>Planets</h2>\n        <p>{ status }</p>\n{/* \n           {data.results[0] && <div>{data.results.map((planetData, pIndex)=>(\n               <div key={pIndex}>Name {planetData.name}</div>\n           ))}</div>}  */}\n\n    </div> );\n}\n \nexport default Planets;","import React from 'react';\n\nconst People = () => {\n    return ( <div>\n        <h2>People</h2>\n    </div> );\n}\n \nexport default People;","import React, { useState } from \"react\";\nimport \"../Styling/App.css\";\nimport Navbar from \"./NavBar\";\nimport Planets from \"./Planets\";\nimport People from \"./People\";\nimport { QueryClient, QueryClientProvider } from 'react-query'\n\nconst queryClient = new QueryClient()\n\nfunction App() {\n  const [page, setPage] = useState(\"planets\");\n\n  return (\n    <QueryClientProvider client={queryClient}>\n    <div className=\"App\">\n      <h1>Star Wars Info</h1>\n      <Navbar setPage={setPage}/>\n      <div className=\"content\">\n        {page === \"planets\" ? <Planets /> : <People />}\n      </div>\n     \n    </div>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}