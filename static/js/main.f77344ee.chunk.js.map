{"version":3,"sources":["Components/App/Cards/CharacterCard.js","Components/App/RickAndMorty.js","Components/App/NavBar.js","Components/App/Episodes.js","Components/App/SpecificCharacterURL.js","Components/App/Locations.js","Components/App/useQuery/fetchCharacters.js","Components/App/useQuery/fetchLocations.js","Components/App/useQuery/fetchEpisodes.js","Components/App/Main.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["CharacterCard","dataPoint","dataIndex","className","name","src","image","alt","origin","status","RickAndMorty","characterList","data","locationList","episodeList","results","map","NavBar","setNavBar","navBar","onClick","EpisodesRicky","episode","fetchSpecificUser","a","queryKey","id","fetch","response","ok","Error","json","SpecificCharacterURL","indexUser","useQuery","isLoading","isError","error","LocationsRicky","type","residents","resident","indexR","fetchCharacters","res","fetchLocations","fetchEpisodes","MainApp","useState","Episodes","Locations","queryClient","QueryClient","App","QueryClientProvider","client","Main","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f77344ee.chunk.js","sourcesContent":["import React from \"react\";\n\nconst CharacterCard = ({ dataPoint, dataIndex }) => {\n  return (\n    <div key={dataIndex} className=\"card\">\n      <h3>Name: {dataPoint.name}</h3>\n      <img src={dataPoint.image} alt={dataPoint.name} />\n      <p>Origin: {dataPoint.origin.name}</p> <p>Status: {dataPoint.status}</p>\n    </div>\n  );\n};\n\nexport default CharacterCard;\n","import React from \"react\";\nimport CharacterCard from \"./Cards/CharacterCard\";\n\nconst RickAndMorty = ({ characterList, locationList, episodeList }) => {\n  const { data, status } = characterList;\n  return (\n    <div>\n      <h2>Rick And Morty</h2>\n\n      {status === \"error\" && <div>Error Fetching Data</div>}\n      {status === \"Loading\" && <div>Loading Data....</div>}\n      {status === \"success\" && (\n        <>\n          {data.results.map((dataPoint, dataIndex) => (\n            <CharacterCard dataPoint={dataPoint} dataIndex={dataIndex} />\n          ))}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default RickAndMorty;\n","import React from \"react\";\n\nconst NavBar = ({ setNavBar, navBar }) => {\n  return (\n    <div>\n      {navBar !== \"C\" && (\n        <button onClick={() => setNavBar(\"C\")}>Characters</button>\n      )}\n      {navBar !== \"E\" && (\n        <button onClick={() => setNavBar(\"E\")}>Episodes</button>\n      )}\n      {navBar !== \"L\" && (\n        <button onClick={() => setNavBar(\"L\")}>Locations</button>\n      )}\n    </div>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\n\nconst EpisodesRicky = ({ characterList, locationList, episodeList }) => {\n  const { data, status } = episodeList;\n\n  return (\n    <div>\n      <h2>Episodes</h2>\n\n      {status === \"error\" && <div>Error Fetching Data</div>}\n      {status === \"Loading\" && <div>Loading Data....</div>}\n      {status === \"success\" && (\n        <>\n          {data.results.map((dataPoint, dataIndex) => (\n            <div key={dataIndex} className=\"card\">\n              <h3>Episode Name: {dataPoint.name}</h3>\n              <p>Episode Number: {dataPoint.episode}</p>{\" \"}\n              <p>Characters: eventually pull here</p>\n            </div>\n          ))}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default EpisodesRicky;\n","import React from \"react\";\nimport { useQuery } from \"react-query\";\n\nconst fetchSpecificUser = async ({ queryKey }) => {\n  const [, id] = queryKey;\n  const response = await fetch(`${id}`);\n  if (!response.ok) {\n    throw new Error(\"Network response was not ok\");\n  }\n  return response.json();\n};\n\nconst SpecificCharacterURL = ({ indexUser }) => {\n  const { isLoading, isError, data, error } = useQuery(\n    [`user`, indexUser],\n    fetchSpecificUser\n  );\n\n  return (\n    <>\n      {data && (\n        <div key={data.name} className=\"card\">\n          <h3>Name: {data.name}</h3>\n          <img src={data.image} alt={data.name} />\n          <p>Origin: {data.origin.name}</p> <p>Status: {data.status}</p>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default SpecificCharacterURL;\n","import React from \"react\";\nimport SpecificCharacterURL from \"./SpecificCharacterURL\";\n\nconst LocationsRicky = ({ characterList, locationList, episodeList }) => {\n  const { data, status } = locationList;\n\n  return (\n    <div>\n      <h2>Locations</h2>\n\n      {status === \"error\" && <div>Error Fetching Data</div>}\n      {status === \"Loading\" && <div>Loading Data....</div>}\n      {status === \"success\" && (\n        <>\n          {data.results.map((dataPoint, dataIndex) => (\n            <div key={dataIndex} className=\"card\">\n              <h3 key={`location{dataIndex}`}>\n                Location Name: {dataPoint.name}\n              </h3>\n              <p key={`type{dataIndex}`}> Type: {dataPoint.type}</p>\n              <div key={`residents{dataIndex}`}>\n                Residents:{\" \"}\n                {dataPoint.residents.map((resident, indexR) => (\n                  <>\n                    {/* {<SpecificCharacterURL indexUser={resident}/>} */}\n                    {/* shouldn't do the above as that is too many fetches --- ask Dave how to get from cache */}\n                  </>\n                ))}\n              </div>\n            </div>\n          ))}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default LocationsRicky;\n","const fetchCharacters = async () => {\n    const res = await fetch(\"https://rickandmortyapi.com/api/character\");\n    return res.json();\n  };\n\n  export default fetchCharacters;\n\n\n","const fetchLocations = async () => {\n    const res = await fetch(\"https://rickandmortyapi.com/api/location\");\n    return res.json();\n  };\n\n  export default fetchLocations;","const fetchEpisodes = async () => {\n  const res = await fetch(\"https://rickandmortyapi.com/api/episode\");\n  return res.json();\n};\n\nexport default fetchEpisodes;","import React, { useState } from \"react\";\nimport \"../Styling/App.css\";\nimport { useQuery } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query-devtools\";\nimport RickAndMorty from \"./RickAndMorty\";\nimport NavBar from \"./NavBar\";\nimport EpisodesRicky from \"./Episodes\";\nimport LocationsRicky from \"./Locations\";\nimport SpecificCharacterURL from \"./SpecificCharacterURL\";\nimport fetchCharacters from \"./useQuery/fetchCharacters\";\nimport fetchLocations from \"./useQuery/fetchLocations\";\nimport fetchEpisodes from \"./useQuery/fetchEpisodes\";\n\nconst MainApp = () => {\n  const [navBar, setNavBar] = useState(\"C\");\n  const characterList = useQuery(\"characterList\", fetchCharacters);\n  const locationList = useQuery(\"locations\", fetchLocations);\n  const episodeList = useQuery(\"episodes\", fetchEpisodes);\n\n  return (\n    <div className=\"App\">\n      <SpecificCharacterURL\n        indexUser={\"https://rickandmortyapi.com/api/character/3\"}\n      />\n      <NavBar setNavBar={setNavBar} navBar={navBar} />\n      {navBar === \"C\" && (\n        <RickAndMorty\n          characterList={characterList}\n          locationList={locationList}\n          episodeList={episodeList}\n        />\n      )}\n      {navBar === \"E\" && (\n        <EpisodesRicky\n          characterList={characterList}\n          locationList={locationList}\n          episodeList={episodeList}\n        />\n      )}\n      {navBar === \"L\" && (\n        <LocationsRicky\n          characterList={characterList}\n          locationList={locationList}\n          episodeList={episodeList}\n        />\n      )}\n\n      {/* <ReactQueryDevtools initialIsOpen={false} />  */}\n    </div>\n  );\n};\n\nexport default MainApp;\n","import React from \"react\";\nimport \"../Styling/App.css\";\nimport {\n  QueryClient,\n  QueryClientProvider,\n} from \"react-query\";\n\nimport MainApp from \"./Main\";\n\nconst queryClient = new QueryClient();\n\nconst App = () => {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <MainApp />\n    </QueryClientProvider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}